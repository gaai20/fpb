{
  
    
        "post0": {
            "title": "üåø 3d tensor",
            "content": "2.2 neural net . import numpy as np . w0=np.array([[1,1,1], [0,0,0], [2,2,2]]) . w1=np.array([[1,1,1], [1,1,1], [0,0,0]]) . te=w0.dot(w1) te . array([[2, 2, 2], [0, 0, 0], [4, 4, 4]]) . def neu_net(inputs,weights): hid=inputs.dot(weights[0]) pred=hid.dot(weights[1]) return pred . weights=np.array([w0,w1]) toes=np.array([1,1,1]) wins=np.array([1,1,1]) nfans=np.array([0,0,0]) inputs=np.array([toes[0],wins[0],nfans[0]]) . pred=neu_net(inputs,weights) print(pred) . [2 2 2] . . p=inputs.dot(w0) print(p) . [1 1 1] . ([1,1,1]) ([[1,1,1], [1,1,1], [0,0,0]]) . [2,2,2] . [2, 2, 2] . import torch . vic=torch.ones(2,1,1) vic . t2=torch.tensor([[[0,0], [1,1]], [[3,3], [4,4]]]) t2.shape . torch.tensor([[[2]], [[2]]]).shape . torch.Size([2, 1, 1]) . numpy to torch . test=torch.from_numpy(w0) test.type . big=torch.tensor([[2,2,2], [1,1,1]]) b=torch.tensor([[1,1], [0,0], [2,2]]) . bilal=torch.matmul(big,b) bilal . tensor([[6, 6], [3, 3]]) . ikka = np.array([[1,1],[1,2]]) type(ikka) . numpy.ndarray . ikka=torch.from_numpy(ikka) type(ikka) . bilalikka=torch.mm(bilal,ikka) bilalikka . tensor([[12, 18], [ 6, 9]]) .",
            "url": "https://gaai20.github.io/fpb/2021/06/10/neural_n-w.html",
            "relUrl": "/2021/06/10/neural_n-w.html",
            "date": " ‚Ä¢ Jun 10, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "‡¥é‡¥®‡µç‡¥§‡¥æ‡¥£‡µç computer science",
            "content": ". Computer science ‡¥®‡µÜ ‡¥™‡¥±‡µç‡¥±‡¥ø ‡¥™‡¥†‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥®‡µÅ‡¥Ç code ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥®‡µÅ‡¥Ç ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥Ü‡¥¶‡µç‡¥Ø ‡¥ö‡µÅ‡¥µ‡¥ü‡µç ‡¥µ‡¥ö‡µç‡¥ö‡¥§‡¥ø‡¥®‡µç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥é‡¥≤‡µç‡¥≤‡¥æ‡¥µ‡¥∞‡µÜ‡¥Ø‡µÅ‡¥Ç ‡¥û‡¥æ‡µª ‡¥Ö‡¥≠‡¥ø‡¥®‡¥®‡µç‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥Ø‡¥æ‡¥£‡µç, cs ‡¥®‡µÜ ‡¥™‡¥±‡µç‡¥±‡¥ø ‡¥µ‡¥≥‡¥∞‡µÜ comprehensive ‡¥Ü‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥é‡¥≤‡µç‡¥≤‡¥æ‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç cover ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥≥‡¥∞‡µÜ simple ‡¥Ü‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µç explain ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥à‡¥Ø‡µä‡¥∞‡µÅ ‡¥ï‡µã‡¥¥‡µç‡¥∏‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥é‡¥≤‡µç‡¥≤‡¥æ‡¥µ‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥Ç ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç, exactly ‡¥é‡¥®‡µç‡¥§‡¥æ‡¥£‡µç ‡¥ï‡¥Æ‡µç‡¥™‡µç‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡µº ‡¥∏‡¥Ø‡µª‡¥∏‡µç, ‡¥í‡¥®‡µç‡¥®‡µÅ‡¥Æ‡¥ø‡¥≤‡µç‡¥≤‡¥æ‡¥®‡µç‡¥®‡µÜ fundamentally computer science ‡¥é‡¥®‡µç‡¥®‡¥§‡µç‡¥ï‡µä‡¥£‡µç‡¥ü‡µç ‡¥â‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç problem solving ‡¥®‡µÜ ‡¥Ü‡¥£‡µç. . ‡¥®‡¥Æ‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥™‡¥∞‡¥ø‡¥π‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥£‡µç‡¥ü ‡¥í‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡µã‡¥¨‡µç‡¥≤‡¥Ç ‡¥â‡¥£‡µç‡¥ü‡µÜ‡¥®‡µç‡¥®‡µÅ ‡¥ï‡¥∞‡µÅ‡¥§‡µÅ‡¥ï ‡¥Ö‡¥§‡¥æ‡¥£‡µç ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ü‡µÜ input , ‡¥à input ‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥ú‡¥®‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥®‡¥Æ‡µç‡¥Æ‡µæ ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡µÅ‡¥®‡µç‡¥® solution ‡¥Ü‡¥£‡µç output . . .",
            "url": "https://gaai20.github.io/fpb/2021/05/13/lesson0.html",
            "relUrl": "/2021/05/13/lesson0.html",
            "date": " ‚Ä¢ May 13, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "yoo",
            "content": ". multilayer neural net . import torch . torch.manual_seed(7) features=torch.Tensor([[0,1,1],[0,1,1]]) inlaye=features.view(1,6) inlayer=inlaye.shape[1] hidlay=2 outlay=1 w1=torch.randn((inlayer,hidlay)) w2=torch.randn((hidlay,outlay)) def sigmoid(x): return 1/1+(torch.exp(-x)) b1=torch.randn((1,1)) y=torch.mm(inlaye,w1)+b1 z=sigmoid(torch.mm(y,w2)) z . tensor([[1.9084]]) . p=torch.Tensor([[27,2],[3,3]]) q=torch.Tensor([[10,5],[3,3]]) . print(p+q) . tensor([[37., 7.], [ 6., 6.]]) . martices;adition . possible . 1 1 + m n . | 1 m + h m . | m n + m n . | . e=torch.Tensor([[1,3,4],[1,2,1]]) print(e) . tensor([[1., 3., 4.], [1., 2., 1.]]) . t=e.view(1,6) print(t) . tensor([[1., 3., 4., 1., 2., 1.]]) .",
            "url": "https://gaai20.github.io/fpb/2021/04/05/markdowntest.html",
            "relUrl": "/2021/04/05/markdowntest.html",
            "date": " ‚Ä¢ Apr 5, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "baaaaaaaam",
            "content": "&#129322; back again . &#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#127804;&#128300;booom . import torch . def activation(x): return 1/(1+torch.exp(-x)) . torch.manual_seed(7) inp=torch.randn((1,4)) weight=torch.randn((4,2)) bias=torch.Tensor([1]) . bias . tensor([1.]) . y0=torch.matmul(inp,weight) y0 . tensor([[-0.7509, -0.6405]]) . y0=activation(torch.matmul(inp,weight)+bias) y0 . tensor([[0.5619, 0.5889]]) . Neural net . After a long break back to action with neural network, starting with udacity torch . Started with torch library ,sigmoid activation function , manual seed, random tensor, matrix multiplication, by combining all these we made a neural network .",
            "url": "https://gaai20.github.io/fpb/2021/04/04/baam.html",
            "relUrl": "/2021/04/04/baam.html",
            "date": " ‚Ä¢ Apr 4, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a ‚Äúlevel 1 heading‚Äù in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here‚Äôs a footnote 1. Here‚Äôs a horizontal rule: . . Lists . Here‚Äôs a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes ‚Ä¶and‚Ä¶ . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote.¬†&#8617; . |",
            "url": "https://gaai20.github.io/fpb/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats.¬†&#8617; . |",
          "url": "https://gaai20.github.io/fpb/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://gaai20.github.io/fpb/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}